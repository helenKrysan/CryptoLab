using System;
using System.Collections.Generic;
using System.Text;

namespace CryptoLab1
{
    class Kalyna
    {
        public const int nb = 2;
        public const int nr = 10;
        public const int nk = 2;

        public uint reduction_polynomial = 0x011d;

        byte[][] mds_matrix = {
        new byte[]{0x01, 0x01, 0x05, 0x01, 0x08, 0x06, 0x07, 0x04},
        new byte[]{0x04, 0x01, 0x01, 0x05, 0x01, 0x08, 0x06, 0x07},
        new byte[]{0x07, 0x04, 0x01, 0x01, 0x05, 0x01, 0x08, 0x06},
        new byte[]{0x06, 0x07, 0x04, 0x01, 0x01, 0x05, 0x01, 0x08},
        new byte[]{0x08, 0x06, 0x07, 0x04, 0x01, 0x01, 0x05, 0x01},
        new byte[]{0x01, 0x08, 0x06, 0x07, 0x04, 0x01, 0x01, 0x05},
        new byte[]{0x05, 0x01, 0x08, 0x06, 0x07, 0x04, 0x01, 0x01},
        new byte[]{0x01, 0x05, 0x01, 0x08, 0x06, 0x07, 0x04, 0x01}
};

        byte[][] sboxes_enc = {
        new byte[]{
                0xa8, 0x43, 0x5f, 0x06, 0x6b, 0x75, 0x6c, 0x59, 0x71, 0xdf, 0x87, 0x95, 0x17, 0xf0, 0xd8, 0x09,
                0x6d, 0xf3, 0x1d, 0xcb, 0xc9, 0x4d, 0x2c, 0xaf, 0x79, 0xe0, 0x97, 0xfd, 0x6f, 0x4b, 0x45, 0x39,
                0x3e, 0xdd, 0xa3, 0x4f, 0xb4, 0xb6, 0x9a, 0x0e, 0x1f, 0xbf, 0x15, 0xe1, 0x49, 0xd2, 0x93, 0xc6,
                0x92, 0x72, 0x9e, 0x61, 0xd1, 0x63, 0xfa, 0xee, 0xf4, 0x19, 0xd5, 0xad, 0x58, 0xa4, 0xbb, 0xa1,
                0xdc, 0xf2, 0x83, 0x37, 0x42, 0xe4, 0x7a, 0x32, 0x9c, 0xcc, 0xab, 0x4a, 0x8f, 0x6e, 0x04, 0x27,
                0x2e, 0xe7, 0xe2, 0x5a, 0x96, 0x16, 0x23, 0x2b, 0xc2, 0x65, 0x66, 0x0f, 0xbc, 0xa9, 0x47, 0x41,
                0x34, 0x48, 0xfc, 0xb7, 0x6a, 0x88, 0xa5, 0x53, 0x86, 0xf9, 0x5b, 0xdb, 0x38, 0x7b, 0xc3, 0x1e,
                0x22, 0x33, 0x24, 0x28, 0x36, 0xc7, 0xb2, 0x3b, 0x8e, 0x77, 0xba, 0xf5, 0x14, 0x9f, 0x08, 0x55,
                0x9b, 0x4c, 0xfe, 0x60, 0x5c, 0xda, 0x18, 0x46, 0xcd, 0x7d, 0x21, 0xb0, 0x3f, 0x1b, 0x89, 0xff,
                0xeb, 0x84, 0x69, 0x3a, 0x9d, 0xd7, 0xd3, 0x70, 0x67, 0x40, 0xb5, 0xde, 0x5d, 0x30, 0x91, 0xb1,
                0x78, 0x11, 0x01, 0xe5, 0x00, 0x68, 0x98, 0xa0, 0xc5, 0x02, 0xa6, 0x74, 0x2d, 0x0b, 0xa2, 0x76,
                0xb3, 0xbe, 0xce, 0xbd, 0xae, 0xe9, 0x8a, 0x31, 0x1c, 0xec, 0xf1, 0x99, 0x94, 0xaa, 0xf6, 0x26,
                0x2f, 0xef, 0xe8, 0x8c, 0x35, 0x03, 0xd4, 0x7f, 0xfb, 0x05, 0xc1, 0x5e, 0x90, 0x20, 0x3d, 0x82,
                0xf7, 0xea, 0x0a, 0x0d, 0x7e, 0xf8, 0x50, 0x1a, 0xc4, 0x07, 0x57, 0xb8, 0x3c, 0x62, 0xe3, 0xc8,
                0xac, 0x52, 0x64, 0x10, 0xd0, 0xd9, 0x13, 0x0c, 0x12, 0x29, 0x51, 0xb9, 0xcf, 0xd6, 0x73, 0x8d,
                0x81, 0x54, 0xc0, 0xed, 0x4e, 0x44, 0xa7, 0x2a, 0x85, 0x25, 0xe6, 0xca, 0x7c, 0x8b, 0x56, 0x80
        },
        new byte[]{
                0xce, 0xbb, 0xeb, 0x92, 0xea, 0xcb, 0x13, 0xc1, 0xe9, 0x3a, 0xd6, 0xb2, 0xd2, 0x90, 0x17, 0xf8,
                0x42, 0x15, 0x56, 0xb4, 0x65, 0x1c, 0x88, 0x43, 0xc5, 0x5c, 0x36, 0xba, 0xf5, 0x57, 0x67, 0x8d,
                0x31, 0xf6, 0x64, 0x58, 0x9e, 0xf4, 0x22, 0xaa, 0x75, 0x0f, 0x02, 0xb1, 0xdf, 0x6d, 0x73, 0x4d,
                0x7c, 0x26, 0x2e, 0xf7, 0x08, 0x5d, 0x44, 0x3e, 0x9f, 0x14, 0xc8, 0xae, 0x54, 0x10, 0xd8, 0xbc,
                0x1a, 0x6b, 0x69, 0xf3, 0xbd, 0x33, 0xab, 0xfa, 0xd1, 0x9b, 0x68, 0x4e, 0x16, 0x95, 0x91, 0xee,
                0x4c, 0x63, 0x8e, 0x5b, 0xcc, 0x3c, 0x19, 0xa1, 0x81, 0x49, 0x7b, 0xd9, 0x6f, 0x37, 0x60, 0xca,
                0xe7, 0x2b, 0x48, 0xfd, 0x96, 0x45, 0xfc, 0x41, 0x12, 0x0d, 0x79, 0xe5, 0x89, 0x8c, 0xe3, 0x20,
                0x30, 0xdc, 0xb7, 0x6c, 0x4a, 0xb5, 0x3f, 0x97, 0xd4, 0x62, 0x2d, 0x06, 0xa4, 0xa5, 0x83, 0x5f,
                0x2a, 0xda, 0xc9, 0x00, 0x7e, 0xa2, 0x55, 0xbf, 0x11, 0xd5, 0x9c, 0xcf, 0x0e, 0x0a, 0x3d, 0x51,
                0x7d, 0x93, 0x1b, 0xfe, 0xc4, 0x47, 0x09, 0x86, 0x0b, 0x8f, 0x9d, 0x6a, 0x07, 0xb9, 0xb0, 0x98,
                0x18, 0x32, 0x71, 0x4b, 0xef, 0x3b, 0x70, 0xa0, 0xe4, 0x40, 0xff, 0xc3, 0xa9, 0xe6, 0x78, 0xf9,
                0x8b, 0x46, 0x80, 0x1e, 0x38, 0xe1, 0xb8, 0xa8, 0xe0, 0x0c, 0x23, 0x76, 0x1d, 0x25, 0x24, 0x05,
                0xf1, 0x6e, 0x94, 0x28, 0x9a, 0x84, 0xe8, 0xa3, 0x4f, 0x77, 0xd3, 0x85, 0xe2, 0x52, 0xf2, 0x82,
                0x50, 0x7a, 0x2f, 0x74, 0x53, 0xb3, 0x61, 0xaf, 0x39, 0x35, 0xde, 0xcd, 0x1f, 0x99, 0xac, 0xad,
                0x72, 0x2c, 0xdd, 0xd0, 0x87, 0xbe, 0x5e, 0xa6, 0xec, 0x04, 0xc6, 0x03, 0x34, 0xfb, 0xdb, 0x59,
                0xb6, 0xc2, 0x01, 0xf0, 0x5a, 0xed, 0xa7, 0x66, 0x21, 0x7f, 0x8a, 0x27, 0xc7, 0xc0, 0x29, 0xd7
        },
        new byte[]{
                0x93, 0xd9, 0x9a, 0xb5, 0x98, 0x22, 0x45, 0xfc, 0xba, 0x6a, 0xdf, 0x02, 0x9f, 0xdc, 0x51, 0x59,
                0x4a, 0x17, 0x2b, 0xc2, 0x94, 0xf4, 0xbb, 0xa3, 0x62, 0xe4, 0x71, 0xd4, 0xcd, 0x70, 0x16, 0xe1,
                0x49, 0x3c, 0xc0, 0xd8, 0x5c, 0x9b, 0xad, 0x85, 0x53, 0xa1, 0x7a, 0xc8, 0x2d, 0xe0, 0xd1, 0x72,
                0xa6, 0x2c, 0xc4, 0xe3, 0x76, 0x78, 0xb7, 0xb4, 0x09, 0x3b, 0x0e, 0x41, 0x4c, 0xde, 0xb2, 0x90,
                0x25, 0xa5, 0xd7, 0x03, 0x11, 0x00, 0xc3, 0x2e, 0x92, 0xef, 0x4e, 0x12, 0x9d, 0x7d, 0xcb, 0x35,
                0x10, 0xd5, 0x4f, 0x9e, 0x4d, 0xa9, 0x55, 0xc6, 0xd0, 0x7b, 0x18, 0x97, 0xd3, 0x36, 0xe6, 0x48,
                0x56, 0x81, 0x8f, 0x77, 0xcc, 0x9c, 0xb9, 0xe2, 0xac, 0xb8, 0x2f, 0x15, 0xa4, 0x7c, 0xda, 0x38,
                0x1e, 0x0b, 0x05, 0xd6, 0x14, 0x6e, 0x6c, 0x7e, 0x66, 0xfd, 0xb1, 0xe5, 0x60, 0xaf, 0x5e, 0x33,
                0x87, 0xc9, 0xf0, 0x5d, 0x6d, 0x3f, 0x88, 0x8d, 0xc7, 0xf7, 0x1d, 0xe9, 0xec, 0xed, 0x80, 0x29,
                0x27, 0xcf, 0x99, 0xa8, 0x50, 0x0f, 0x37, 0x24, 0x28, 0x30, 0x95, 0xd2, 0x3e, 0x5b, 0x40, 0x83,
                0xb3, 0x69, 0x57, 0x1f, 0x07, 0x1c, 0x8a, 0xbc, 0x20, 0xeb, 0xce, 0x8e, 0xab, 0xee, 0x31, 0xa2,
                0x73, 0xf9, 0xca, 0x3a, 0x1a, 0xfb, 0x0d, 0xc1, 0xfe, 0xfa, 0xf2, 0x6f, 0xbd, 0x96, 0xdd, 0x43,
                0x52, 0xb6, 0x08, 0xf3, 0xae, 0xbe, 0x19, 0x89, 0x32, 0x26, 0xb0, 0xea, 0x4b, 0x64, 0x84, 0x82,
                0x6b, 0xf5, 0x79, 0xbf, 0x01, 0x5f, 0x75, 0x63, 0x1b, 0x23, 0x3d, 0x68, 0x2a, 0x65, 0xe8, 0x91,
                0xf6, 0xff, 0x13, 0x58, 0xf1, 0x47, 0x0a, 0x7f, 0xc5, 0xa7, 0xe7, 0x61, 0x5a, 0x06, 0x46, 0x44,
                0x42, 0x04, 0xa0, 0xdb, 0x39, 0x86, 0x54, 0xaa, 0x8c, 0x34, 0x21, 0x8b, 0xf8, 0x0c, 0x74, 0x67
        },
        new byte[]{
                0x68, 0x8d, 0xca, 0x4d, 0x73, 0x4b, 0x4e, 0x2a, 0xd4, 0x52, 0x26, 0xb3, 0x54, 0x1e, 0x19, 0x1f,
                0x22, 0x03, 0x46, 0x3d, 0x2d, 0x4a, 0x53, 0x83, 0x13, 0x8a, 0xb7, 0xd5, 0x25, 0x79, 0xf5, 0xbd,
                0x58, 0x2f, 0x0d, 0x02, 0xed, 0x51, 0x9e, 0x11, 0xf2, 0x3e, 0x55, 0x5e, 0xd1, 0x16, 0x3c, 0x66,
                0x70, 0x5d, 0xf3, 0x45, 0x40, 0xcc, 0xe8, 0x94, 0x56, 0x08, 0xce, 0x1a, 0x3a, 0xd2, 0xe1, 0xdf,
                0xb5, 0x38, 0x6e, 0x0e, 0xe5, 0xf4, 0xf9, 0x86, 0xe9, 0x4f, 0xd6, 0x85, 0x23, 0xcf, 0x32, 0x99,
                0x31, 0x14, 0xae, 0xee, 0xc8, 0x48, 0xd3, 0x30, 0xa1, 0x92, 0x41, 0xb1, 0x18, 0xc4, 0x2c, 0x71,
                0x72, 0x44, 0x15, 0xfd, 0x37, 0xbe, 0x5f, 0xaa, 0x9b, 0x88, 0xd8, 0xab, 0x89, 0x9c, 0xfa, 0x60,
                0xea, 0xbc, 0x62, 0x0c, 0x24, 0xa6, 0xa8, 0xec, 0x67, 0x20, 0xdb, 0x7c, 0x28, 0xdd, 0xac, 0x5b,
                0x34, 0x7e, 0x10, 0xf1, 0x7b, 0x8f, 0x63, 0xa0, 0x05, 0x9a, 0x43, 0x77, 0x21, 0xbf, 0x27, 0x09,
                0xc3, 0x9f, 0xb6, 0xd7, 0x29, 0xc2, 0xeb, 0xc0, 0xa4, 0x8b, 0x8c, 0x1d, 0xfb, 0xff, 0xc1, 0xb2,
                0x97, 0x2e, 0xf8, 0x65, 0xf6, 0x75, 0x07, 0x04, 0x49, 0x33, 0xe4, 0xd9, 0xb9, 0xd0, 0x42, 0xc7,
                0x6c, 0x90, 0x00, 0x8e, 0x6f, 0x50, 0x01, 0xc5, 0xda, 0x47, 0x3f, 0xcd, 0x69, 0xa2, 0xe2, 0x7a,
                0xa7, 0xc6, 0x93, 0x0f, 0x0a, 0x06, 0xe6, 0x2b, 0x96, 0xa3, 0x1c, 0xaf, 0x6a, 0x12, 0x84, 0x39,
                0xe7, 0xb0, 0x82, 0xf7, 0xfe, 0x9d, 0x87, 0x5c, 0x81, 0x35, 0xde, 0xb4, 0xa5, 0xfc, 0x80, 0xef,
                0xcb, 0xbb, 0x6b, 0x76, 0xba, 0x5a, 0x7d, 0x78, 0x0b, 0x95, 0xe3, 0xad, 0x74, 0x98, 0x3b, 0x36,
                0x64, 0x6d, 0xdc, 0xf0, 0x59, 0xa9, 0x4c, 0x17, 0x7f, 0x91, 0xb8, 0xc9, 0x57, 0x1b, 0xe0, 0x61
        }
};

        public Kalyna()
        {

        }

        void SubBytes(ulong[] state)
        {
            for (int i = 0; i < nb; ++i)
            {
                state[i] = sboxes_enc[0][state[i] & 0x00000000000000FF] |
                                ((ulong)sboxes_enc[1][(state[i] & 0x000000000000FF00) >> 8] << 8) |
                                ((ulong)sboxes_enc[2][(state[i] & 0x0000000000FF0000) >> 16] << 16) |
                                ((ulong)sboxes_enc[3][(state[i] & 0x00000000FF000000) >> 24] << 24) |
                                ((ulong)sboxes_enc[0][(state[i] & 0x000000FF00000000) >> 32] << 32) |
                                ((ulong)sboxes_enc[1][(state[i] & 0x0000FF0000000000) >> 40] << 40) |
                                ((ulong)sboxes_enc[2][(state[i] & 0x00FF000000000000) >> 48] << 48) |
                                ((ulong)sboxes_enc[3][(state[i] & 0xFF00000000000000) >> 56] << 56);
            }
        }
        void ShiftRows(ulong[] state)
        {
            int shift = -1;
            byte[] s = new byte[state.Length * 8];
            int count = 0;
            foreach (var st in state)
            {
                Array.Copy(BitConverter.GetBytes(st), 0, s, count * 8, 8);
                count++;
            }
            byte[] ns = new byte[nb];

            for (int row = 0; row < 8; ++row)
            {
                if ((row % 8 / nb) == 0)
                {
                    shift += 1;
                }
                for (int col = 0; col < nb; ++col)
                {
                    ns[(col)] = s[(col)];
                }
            }

            count = 0;
            foreach (var st in state)
            {
                Array.Copy(BitConverter.GetBytes(st), 0, s, count * 8, 8);
                count++;
            }
            count = ns.Length / 4;
            if (ns.Length < 8)
            {
                byte[] arr = new byte[8];
                for (int i = 0; i < ns.Length; i++)
                {
                    arr[i] = ns[i];
                }
                for (int i = 0; i < 4; i++)
                {
                    state[i] = BitConverter.ToUInt64(arr, 0);
                }

            }
            else
            {
                for (int i = 0; i < 4; i++)
                {
                    state[i] = BitConverter.ToUInt64(ns, i * count);
                }
            }
        }

        private byte MultiplyGF(byte x, byte y)
        {
            byte r = 0;
            byte hbit = 0;
            for (int i = 0; i < 8; ++i)
            {
                if ((y & 0x1) == 1)
                    r ^= x;
                hbit = (byte)(x & 0x80);
                x <<= 1;
                if (hbit == 0x80)
                    x = (byte)(x ^ reduction_polynomial);
                y >>= 1;
            }
            return r;
        }

        private void MatrixMultiply(ulong[] state, byte[][] matrix)
        {
            int row, b;
            byte product;
            ulong result;
            int count = 0;
            byte[] s = new byte[state.Length * 8];
            foreach (var st in state)
            {
                Array.Copy(BitConverter.GetBytes(st), 0, s, count * 8, 8);
                count++;
            }

            for (int col = 0; col < nb; ++col)
            {
                result = 0;
                for (row = 7; row >= 0; --row)
                {
                    product = 0;
                    for (b = 7; b >= 0; --b)
                    {
                        product ^= MultiplyGF(s[(b) + (col) * 8], matrix[row][b]);
                    }
                    result |= (ulong)product << (row * 8);
                }
                state[col] = result;
            }
        }

        private void MixColumns(ulong[] state)
        {
            MatrixMultiply(state, mds_matrix);
        }

        private void EncipherRound(ulong[] state)
        {
            SubBytes(state);
            ShiftRows(state);
            MixColumns(state);
        }
        private void AddRoundKey(int round, ulong[] state, ulong[][] round_keys)
        {
            for (int i = 0; i < nb; ++i)
            {
                state[i] = state[i] + round_keys[round][i];
            }
        }

        private void AddRoundKeyExpand(ulong[] value, ulong[] state)
        {
            for (int i = 0; i < nb; ++i)
            {
                state[i] = state[i] + value[i];
            }
        }
        private void XorRoundKey(int round, ulong[] state, ulong[][] round_keys)
        {
            for (int i = 0; i < nb; ++i)
            {
                state[i] = state[i] ^ round_keys[round][i];
            }
        }

        private void XorRoundKeyExpand(ulong[] value, ulong[] state)
        {
            for (int i = 0; i < nb; ++i)
            {
                state[i] = state[i] ^ value[i];
            }
        }
        public ulong[] KalynaEncipher(ulong[] plaintext, ulong[] state, ulong[][] round_keys)
        {
            int round = 0;
            Array.Copy(plaintext, state, nb);

            AddRoundKey(round, state, round_keys);
            for (round = 1; round < nr; ++round)
            {
                EncipherRound(state);
                XorRoundKey(round, state, round_keys);
            }
            EncipherRound(state);
            AddRoundKey(nr, state, round_keys);

            return state;
        }

        void KeyExpandKt(ulong[] key, ulong[] state, ulong[] kt)
        {
            ulong[] key0 = new ulong[nb];
            ulong[] key1 = new ulong[nb];

            state = new ulong[nb * 8];
            state[0] += nb + nk + 1;

            Array.Copy(key, key0, nb);
            Array.Copy(key, key1, nb);


            AddRoundKeyExpand(key0, state);
            EncipherRound(state);
            XorRoundKeyExpand(key1, state);
            EncipherRound(state);
            AddRoundKeyExpand(key0, state);
            EncipherRound(state);
            Array.Copy(state, kt, nb * 8);
        }
        void KeyExpandEven(ulong[] key, ulong[] kt, ulong[] state, ulong[][] round_keys)
        {
            ulong[] initial_data = new ulong[nk];
            ulong[] kt_round = new ulong[nk];
            ulong[] value = new ulong[nk];
            int round = 0;

            Array.Copy(key, initial_data, nk);
            for (int i = 0; i < nb; ++i)
            {
                value[i] = 0x0001000100010001;
            }

            while (true)
            {
                Array.Copy(kt, state, nk);
                AddRoundKeyExpand(value, state);
                Array.Copy(state, kt_round, nb);

                Array.Copy(initial_data, state, nb);

                AddRoundKeyExpand(kt_round, state);
                EncipherRound(state);
                XorRoundKeyExpand(kt_round, state);
                EncipherRound(state);
                AddRoundKeyExpand(kt_round, state);

                Array.Copy(state, round_keys[round], nb);

                if (nr == round)
                {
                    break;
                }
                round += 2;
                ShiftLeft(value);
                Rotate(initial_data);
            }

        }

        void Rotate(ulong[] state_value)
        {
            ulong temp = state_value[0];
            for (int i = 1; i < nk; ++i)
            {
                state_value[i - 1] = state_value[i];
            }
            state_value[nk - 1] = temp;
        }


        void ShiftLeft(ulong[] state_value)
        {
            for (int i = 0; i < nb; ++i)
            {
                state_value[i] <<= 1;
            }
        }


        public void KeyExpandOdd(ulong[] state, ulong[][] round_keys)
        {
            for (int i = 1; i < nr; i += 2)
            {
                Array.Copy(round_keys[i - 1], round_keys[i], nb);
                RotateLeft(round_keys[i]);
            }
        }

        private void RotateLeft(ulong[] state)
        {
            int rotate_bytes = 4;


            byte[] bytes = new byte[state.Length * 8];
            int count = 0;
            foreach (var st in state)
            {
                Array.Copy(BitConverter.GetBytes(st), 0, state, count, 1);
                count++;
            }
            ulong[] buffer = new ulong[rotate_bytes];

            Array.Copy(state, buffer, rotate_bytes);
            Array.Copy(state, rotate_bytes, state, 0, state.Length - rotate_bytes);
            Array.Copy(buffer, 0, state, state.Length - rotate_bytes, rotate_bytes);

            count = bytes.Length / 4;
            for (int i = 0; i < 4; i++)
            {
                state[i] = BitConverter.ToUInt64(bytes, i * count);
            }
        }

        public ulong[] KalynaKeyExpand(ulong[] key, ulong[] state, ulong[][] round_keys)
        {
            ulong[] kt = new ulong[nb * 8];
            KeyExpandKt(key, state, kt);
            KeyExpandEven(key, kt, state, round_keys);
            KeyExpandOdd(state, round_keys);
            return key;
        }
    }
}